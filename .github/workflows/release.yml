name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-deb:
    name: Build DEB package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            clang \
            llvm \
            pkg-config \
            libssl-dev \
            protobuf-compiler \
            perl \
            golang

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cross-compilation tools (aarch64)
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Setup target (x86_64)
        if: matrix.arch == 'x86_64'
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-deb
        run: cargo install cargo-deb

      - name: Build DEB package (x86_64)
        if: matrix.arch == 'x86_64'
        run: cargo deb --target x86_64-unknown-linux-gnu

      - name: Build DEB package (aarch64)
        if: matrix.arch == 'aarch64'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
        run: cargo deb --target aarch64-unknown-linux-gnu

      - name: Upload DEB artifact
        uses: actions/upload-artifact@v4
        with:
          name: clashprobe-${{ matrix.arch }}-deb
          path: target/${{ matrix.arch }}-unknown-linux-gnu/debian/*.deb

  build-rpm:
    name: Build RPM package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [x86_64, aarch64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            cmake \
            clang \
            llvm \
            pkg-config \
            libssl-dev \
            protobuf-compiler \
            perl \
            golang \
            rpm

      - name: Setup Rust toolchain
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cross-compilation tools (aarch64)
        if: matrix.arch == 'aarch64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
          rustup target add aarch64-unknown-linux-gnu

      - name: Setup target (x86_64)
        if: matrix.arch == 'x86_64'
        run: rustup target add x86_64-unknown-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache target directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-target-${{ matrix.arch }}-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-generate-rpm
        run: cargo install cargo-generate-rpm

      - name: Build binary (x86_64)
        if: matrix.arch == 'x86_64'
        run: cargo build --release --target x86_64-unknown-linux-gnu

      - name: Build binary (aarch64)
        if: matrix.arch == 'aarch64'
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
          CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
          CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++
        run: cargo build --release --target aarch64-unknown-linux-gnu

      - name: Generate RPM package
        run: cargo generate-rpm --target ${{ matrix.arch }}-unknown-linux-gnu

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: clashprobe-${{ matrix.arch }}-rpm
          path: target/${{ matrix.arch }}-unknown-linux-gnu/generate-rpm/*.rpm

  create-release:
    name: Create GitHub Release
    needs: [build-deb, build-rpm]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.deb
            artifacts/**/*.rpm
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}